db.UpdateFinancial <- function(channel, exchangeCode, stockCode){
strSql = paste0("EXEC dbo.SP_UpdateTableFincial @ExchangeCode='", exchangeCode ,"', @StockCode='", stockCode, "'")
sqlQuery(dbChannel, strSql)
}
# datafram related
# Update Masure Name
df.UpdateMeasureName <- function(df, rowNo){
r <- rowNo
for (x in 0:3){
a <- df[r,1]
for (i in 1:4){
r <- r + 1
b <- df.keyratios[r,1]
c <- paste0(a, " ", b)
df[r,1] <- c
}
r <- r + 1
}
return(df)
}
df.getTempDF <- function(keyratios){
keyratios <- sub(".*Financials\n(.*)*","\\1", keyratios)
df.keyratios <- read.csv(textConnection(keyratios))
df.keyratios$X <- as.character(df.keyratios$X)
df.keyratios <- df.UpdateMeasureName(df.keyratios, 38)
# remove unwanted rows
str.excluded <- c(
""
,"Key Ratios -> Profitability"
,"Margins % of Sales"
,"Profitability"
,"Key Ratios -> Growth"
,"Key Ratios -> Cash Flow"
,"Cash Flow Ratios"
,"Key Ratios -> Financial Health"
,"Balance Sheet Items (in %)"
,"Liquidity/Financial Health"
,"Key Ratios -> Efficiency Ratios"
,"Efficiency"
,"perating Income %"
,"Net Income %"
,"EPS %"
,"Revenue %"
)
df.keyratios <- df.keyratios[ !(df.keyratios$X %in% str.excluded), ]
# Tranpose
df.keyratios <- as.data.frame(t(df.keyratios))
df.keyratios$FiscalYear <-rownames(df.keyratios)
return(df.keyratios)
}
dbChannel <- db.handle(db.conn())
df.Company <- db.getCompanyDF(dbChannel, 'SG')
for (c in df.Company$`Stock Code`){
region <- df.Company[ df.Company$`Stock Code` == c,c('ms.region')]
exchange <- df.Company[ df.Company$`Stock Code` == c,c('Exchange Code')]
str.keyratios <- ms.getData(ms.urlKR(c,region))
t <- df.getTempDF(str.keyratios)
db.saveDF(dbChannel, t, "tmp_keyratios")
db.UpdateFinancial(dbChannel, exchange, c)
print(c)
#print(region)
#print(exchange)
#print(str.keyratios)
}
View(df.Company)
require(RCurl)
require(jsonlite)
require(RODBC)
# Morningstar related
ms.urlFS <- function(ticker, reportType, region = ""){
return(paste0("http://financials.morningstar.com/ajax/ReportProcess4CSV.html?t=", ticker, "&reportType=", reportType , "&period=12&dataType=A&order=asc&columnYear=10&number=3&region=", region))
}
ms.urlKR <- function(ticker, region = ""){
return(paste0("http://financials.morningstar.com/ajax/exportKR2CSV.html?t=", ticker, "&region=", region))
}
ms.getData <- function(url){
return(
getURL(url)
)
}
# Database related
library(RODBC)
db.conn <- function(){
return(paste0("driver={SQL Server};server=YNWT-PC\\SQL2012;database=ProjectV;trusted_connection=true"))
}
db.handle <- function(x){
return(odbcDriverConnect(x))
}
db.getCompanyDF <- function(channel, countryCode){
strSql <- paste0("Select [Exchange Code], [Stock Code], [ms.region] from ProjectV.dbo.TBL_Company where [Country Code] = '", countryCode, "';")
df.comapny <- sqlQuery(channel, strSql);
}
#db.getCompanyDF(channel, 'SG')
db.saveDF <- function(channel, df, tablename){
sqlDrop(channel, tablename, FALSE)
sqlSave(channel, df, tablename,colnames=FALSE )
}
db.UpdateFinancial <- function(channel, exchangeCode, stockCode){
strSql = paste0("EXEC dbo.SP_UpdateTableFincial @ExchangeCode='", exchangeCode ,"', @StockCode='", stockCode, "'")
sqlQuery(dbChannel, strSql)
}
# datafram related
# Update Masure Name
df.UpdateMeasureName <- function(df, rowNo){
r <- rowNo
for (x in 0:3){
a <- df[r,1]
for (i in 1:4){
r <- r + 1
b <- df.keyratios[r,1]
c <- paste0(a, " ", b)
df[r,1] <- c
}
r <- r + 1
}
return(df)
}
df.getTempDF <- function(keyratios){
keyratios <- sub(".*Financials\n(.*)*","\\1", keyratios)
df.keyratios <- read.csv(textConnection(keyratios))
df.keyratios$X <- as.character(df.keyratios$X)
df.keyratios <- df.UpdateMeasureName(df.keyratios, 38)
# remove unwanted rows
str.excluded <- c(
""
,"Key Ratios -> Profitability"
,"Margins % of Sales"
,"Profitability"
,"Key Ratios -> Growth"
,"Key Ratios -> Cash Flow"
,"Cash Flow Ratios"
,"Key Ratios -> Financial Health"
,"Balance Sheet Items (in %)"
,"Liquidity/Financial Health"
,"Key Ratios -> Efficiency Ratios"
,"Efficiency"
,"perating Income %"
,"Net Income %"
,"EPS %"
,"Revenue %"
)
df.keyratios <- df.keyratios[ !(df.keyratios$X %in% str.excluded), ]
# Tranpose
df.keyratios <- as.data.frame(t(df.keyratios))
df.keyratios$FiscalYear <-rownames(df.keyratios)
return(df.keyratios)
}
df.Company <- db.getCompanyDF(dbChannel, 'AU')
dbChannel <- db.handle(db.conn())
df.Company <- db.getCompanyDF(dbChannel, 'AU')
View(df.Company)
View(df.Company)
for (c in df.Company$`Stock Code`){
region <- df.Company[ df.Company$`Stock Code` == c,c('ms.region')]
exchange <- df.Company[ df.Company$`Stock Code` == c,c('Exchange Code')]
str.keyratios <- ms.getData(ms.urlKR(c,region))
t <- df.getTempDF(str.keyratios)
db.saveDF(dbChannel, t, "tmp_keyratios")
db.UpdateFinancial(dbChannel, exchange, c)
print(c)
#print(region)
#print(exchange)
#print(str.keyratios)
}
View(df.comapny)
View(df.comapny)
View(df.Company)
ms.getData(ms.urlKR("CZZ","AUS"))
ms.getData(ms.urlKR("CIN","AUS"))
dbChannel <- db.handle(db.conn())
#df.Company <- db.getCompanyDF(dbChannel, 'SG')
df.Company <- db.getCompanyDF(dbChannel, 'AU')
for (c in df.Company$`Stock Code`){
region <- df.Company[ df.Company$`Stock Code` == c,c('ms.region')]
exchange <- df.Company[ df.Company$`Stock Code` == c,c('Exchange Code')]
str.keyratios <- ms.getData(ms.urlKR(c,region))
t <- df.getTempDF(str.keyratios)
if (t != ""){
db.saveDF(dbChannel, t, "tmp_keyratios")
db.UpdateFinancial(dbChannel, exchange, c)
print(c)
}
#print(region)
#print(exchange)
#print(str.keyratios)
}
dbChannel <- db.handle(db.conn())
#df.Company <- db.getCompanyDF(dbChannel, 'SG')
df.Company <- db.getCompanyDF(dbChannel, 'AU')
for (c in df.Company$`Stock Code`){
region <- df.Company[ df.Company$`Stock Code` == c,c('ms.region')]
exchange <- df.Company[ df.Company$`Stock Code` == c,c('Exchange Code')]
str.keyratios <- ms.getData(ms.urlKR(c,region))
if (str.keyratios != ""){
t <- df.getTempDF(str.keyratios)
db.saveDF(dbChannel, t, "tmp_keyratios")
db.UpdateFinancial(dbChannel, exchange, c)
print(c)
}
#print(region)
#print(exchange)
#print(str.keyratios)
}
require(RCurl)
require(jsonlite)
require(RODBC)
# Morningstar related
ms.urlFS <- function(ticker, reportType, region = ""){
return(paste0("http://financials.morningstar.com/ajax/ReportProcess4CSV.html?t=", ticker, "&reportType=", reportType , "&period=12&dataType=A&order=asc&columnYear=10&number=3&region=", region))
}
ms.urlKR <- function(ticker, region = ""){
return(paste0("http://financials.morningstar.com/ajax/exportKR2CSV.html?t=", ticker, "&region=", region))
}
ms.getData <- function(url){
return(
getURL(url)
)
}
# Database related
library(RODBC)
db.conn <- function(){
return(paste0("driver={SQL Server};server=YNWT-PC\\SQL2012;database=ProjectV;trusted_connection=true"))
}
db.handle <- function(x){
return(odbcDriverConnect(x))
}
db.getCompanyDF <- function(channel, countryCode){
strSql <- paste0("Select [Exchange Code], [Stock Code], [ms.region] from ProjectV.dbo.TBL_Company where [Country Code] = '", countryCode, "'
and not exists (select 1 from ProjectV.dbo.TBL_Financial f where c.Company_key = f.Company_key) ;;")
df.comapny <- sqlQuery(channel, strSql);
}
#db.getCompanyDF(channel, 'SG')
db.saveDF <- function(channel, df, tablename){
sqlDrop(channel, tablename, FALSE)
sqlSave(channel, df, tablename,colnames=FALSE )
}
db.UpdateFinancial <- function(channel, exchangeCode, stockCode){
strSql = paste0("EXEC dbo.SP_UpdateTableFincial @ExchangeCode='", exchangeCode ,"', @StockCode='", stockCode, "'")
sqlQuery(dbChannel, strSql)
}
# datafram related
# Update Masure Name
df.UpdateMeasureName <- function(df, rowNo){
r <- rowNo
for (x in 0:3){
a <- df[r,1]
for (i in 1:4){
r <- r + 1
b <- df.keyratios[r,1]
c <- paste0(a, " ", b)
df[r,1] <- c
}
r <- r + 1
}
return(df)
}
df.getTempDF <- function(keyratios){
keyratios <- sub(".*Financials\n(.*)*","\\1", keyratios)
df.keyratios <- read.csv(textConnection(keyratios))
df.keyratios$X <- as.character(df.keyratios$X)
df.keyratios <- df.UpdateMeasureName(df.keyratios, 38)
# remove unwanted rows
str.excluded <- c(
""
,"Key Ratios -> Profitability"
,"Margins % of Sales"
,"Profitability"
,"Key Ratios -> Growth"
,"Key Ratios -> Cash Flow"
,"Cash Flow Ratios"
,"Key Ratios -> Financial Health"
,"Balance Sheet Items (in %)"
,"Liquidity/Financial Health"
,"Key Ratios -> Efficiency Ratios"
,"Efficiency"
,"perating Income %"
,"Net Income %"
,"EPS %"
,"Revenue %"
)
df.keyratios <- df.keyratios[ !(df.keyratios$X %in% str.excluded), ]
# Tranpose
df.keyratios <- as.data.frame(t(df.keyratios))
df.keyratios$FiscalYear <-rownames(df.keyratios)
return(df.keyratios)
}
ms.getData(ms.urlKR("BIIB"))
ms.getData(ms.urlKR("CIN","AUS"))
ms.getData(ms.urlFS("BIIB", "is"))
ms.getData(ms.urlFS("BSL", "bs", "sgp"))
ms.getData(ms.urlFS("V01", "cf", "sgp"))
ms.getData(ms.urlFS("CZZ", "cf", "sgp"))
dbChannel <- db.handle(db.conn())
df.Company <- db.getCompanyDF(dbChannel, 'AU')
View(df.comapny)
db.getCompanyDF <- function(channel, countryCode){
strSql <- paste0("Select [Exchange Code], [Stock Code], [ms.region] from ProjectV.dbo.TBL_Company c where [Country Code] = '", countryCode, "'
and not exists (select 1 from ProjectV.dbo.TBL_Financial f where c.Company_key = f.Company_key) ;;")
df.comapny <- sqlQuery(channel, strSql);
}
df.Company <- db.getCompanyDF(dbChannel, 'AU')
View(df.Company)
for (c in df.Company$`Stock Code`){
region <- df.Company[ df.Company$`Stock Code` == c,c('ms.region')]
exchange <- df.Company[ df.Company$`Stock Code` == c,c('Exchange Code')]
str.keyratios <- ms.getData(ms.urlKR(c,region))
if (str.keyratios != ""){
t <- df.getTempDF(str.keyratios)
db.saveDF(dbChannel, t, "tmp_keyratios")
db.UpdateFinancial(dbChannel, exchange, c)
print(c)
}
#print(region)
#print(exchange)
#print(str.keyratios)
}
which git
?
.
?print
?print
version
data.frame
library(data.table)
package("data.table")
package(data.table)
install.packages('data.table')
library(data.table)
x <- 4
class(x)
x <- c(4, TRUE)
class(x)
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbine(x,y)
cbind(x,y)
z <- cbind(x,y)
class(z)
z
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- c(17, 14, 4, 5, 13, 12, 10)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
hw1_data <- read_csv("D:/Temp/quiz1_data/hw1_data.csv")
View(hw1_data)
hw1_data[47]
hw1_data[1:2]
hw1_data[1:2, 3:4]
hw1_data[1:2, 1]
hw1_data[47, 1]
isnull(hw1_data[1:200, 1])
is,null(hw1_data[1:200, 1])
is.null(hw1_data[1:200, 1])
is.na(c(data$Ozone)
?
z
c(data$Ozone)
is.na(c(data$Ozone))
table(factor(is.na(c(data$Ozone))))[2]
mean(hw1_data$Ozone)
mean(hw1_data$Ozone[!is.na(hw1_data$Ozone)])
hw1_data[hw1_data$Ozone>31]
hw1_data[hw1_data$Ozone>31,]
hw1_data[hw1_data$Ozone>31 && hw1_data$Temp>91,]
hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,]
mean(hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,2]
)
hw1_data[hw1_data$Ozone>31 && hw1_data$Temp>91,]
mean(hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,2]
)
hw1_data[hw1_data$Ozone>31 && hw1_data$Temp>91,]
)hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,]
hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,]
hw1_data$Solar.R[hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,]
]
hw1_data[hw1_data$Ozone>31 && hw1_data$Temp>91,]
hw1_data[hw1_data$Ozone>31 & hw1_data$Temp>91,]
hw1_data[hw1_data$Month == 6]
hw1_data[hw1_data$Month == 6,]
hw1_data$Temp[hw1_data$Month == 6,]
hw1_data[hw1_data$Month == 6,]$Temp
mean(hw1_data[hw1_data$Month == 6,]$Temp)
max(hw1_data[hw1_data$Month == 5,]$Ozone)
max(hw1_data[hw1_data$Month == 5 & !is.na(hw1_data$Ozone),]$Ozone)
install.packages("markdown")
install.packages("rmarkdown")
swirl
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
clas(cls_list)
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, min, max)
lapply(flag_shapes, min)
lapply(flag_shapes, range)
View(flag_shapes)
shap_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lappy(unique_vals, function(elem) emem[2])
lapply(unique_vals, function(elem) emem[2])
lapply(unique_vals, function(elem) elem[2])
swirl()
viewinfo()
info()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
?iris
data("iris")
data(iris)
rm(iris)
data(iris)
?iris
iris
head(iris)
tapply(iris, iris$Sepal.Length, iris$Species, mean)
?tapply
vapply(iris, iris$Sepal.Length, iris$Species, mean)
vapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
setwd("D:/YNWT/CourseRA/3. Data Cleaning")
setwd("D:/YNWT/CourseRA/2. R Programming/Week3")
head(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
rowMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)--
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)--
split(mtcars$mpg, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)--
class(split(mtcars$mpg, mtcars$cyl))
class(split(mtcars$mpg, mtcars$cyl))
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars, hp, cyl, mean)
tapply(mtcars, mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
class(tapply(mtcars$hp, mtcars$cyl, mean))
a4
a4 <- tapply(mtcars$hp, mtcars$cyl, mean)
a4
a4[2]
a4[2]-a4[3]
a4[1]-a4[3]
debug(ls)
?ls
ls
ls(iris)
tt
ls
100
1
2
exi
exit
